package uk.ac.ebi.pride.iongen.model;

import org.apache.commons.math3.distribution.BinomialDistribution;
import org.junit.Test;
import uk.ac.ebi.pride.iongen.model.impl.DefaultPrecursorIon;
import uk.ac.ebi.pride.mol.ProductIonPair;

import java.math.BigDecimal;
import java.util.List;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertTrue;

/**
 * User: qingwei
 * Date: 10/12/12
 */
public class PeptideScoreTest {
    private PrecursorIon precursorIon = new DefaultPrecursorIon("VVSVLTVLHQDWLNGK", 2);
    private double[] mzArray = {296.14764404296875,297.8748779296875,299.8394775390625,301.9700927734375,313.1361083984375,318.13177490234375,319.06524658203125,321.8583984375,324.0738525390625,346.1568603515625,347.647705078125,352.64306640625,364.8765869140625,367.04449462890625,368.3057861328125,379.1202392578125,381.1158447265625,383.120849609375,395.15576171875,399.054443359375,431.1387939453125,432.7166748046875,452.03759765625,464.1614990234375,467.65277099609375,468.3175048828125,477.6627197265625,480.1109619140625,482.14892578125,482.8671875,496.13037109375,498.61944580078125,499.25299072265625,500.15936279296875,511.4937744140625,518.9674072265625,522.1351318359375,523.444580078125,530.2315673828125,532.186767578125,532.89404296875,542.7333984375,546.4239501953125,548.884521484375,550.0625,553.5577392578125,562.949951171875,567.662109375,578.1263427734375,579.1461181640625,580.9564208984375,581.797607421875,594.943603515625,600.254150390625,607.177978515625,609.4302978515625,612.97265625,615.19775390625,617.135009765625,618.16259765625,619.437744140625,642.97412109375,646.497802734375,647.28515625,653.9801025390625,655.803955078125,662.205078125,664.173583984375,665.3328857421875,672.17236328125,676.257080078125,677.22119140625,680.03662109375,681.35302734375,694.3941650390625,695.2271728515625,697.050048828125,698.04150390625,701.40380859375,716.0185546875,720.319580078125,725.052978515625,727.874755859375,732.268310546875,733.448486328125,745.466064453125,750.5518798828125,775.48193359375,776.29736328125,781.940673828125,787.103759765625,793.29833984375,803.08154296875,806.0294189453125,807.6246337890625,810.1236572265625,811.0411376953125,825.2757568359375,834.2576904296875,841.4625244140625,843.5106201171875,844.3162841796875,853.0150146484375,855.2154541015625,860.614013671875,861.3262939453125,870.3343505859375,877.4801025390625,887.431640625,919.0341796875,921.4595947265625,926.7269287109375,930.07958984375,932.7298583984375,933.7288818359375,939.450927734375,940.2603759765625,948.3387451171875,949.336669921875,950.6212158203125,955.6859130859375,961.4154052734375,962.5234375,963.4901123046875,964.47021484375,965.6632080078125,967.062744140625,970.1131591796875,979.478271484375,980.43408203125,982.78759765625,984.25341796875,989.6199951171875,996.5858154296875,997.367919921875,998.3538818359375,999.465576171875,1046.85498046875,1053.76220703125,1076.53955078125,1077.896484375,1092.36669921875,1093.445556640625,1094.3232421875,1095.625244140625,1110.54150390625,1111.474609375,1112.5283203125,1132.6220703125,1150.483642578125,1151.37353515625,1162.3681640625,1177.922119140625,1178.888671875,1179.63134765625,1191.5478515625,1192.351806640625,1193.48583984375,1209.42529296875,1210.769287109375,1211.79150390625,1220.52685546875,1230.4716796875,1254.25830078125,1293.052734375,1293.679931640625,1294.510498046875,1310.67626953125,1311.56591796875,1312.462158203125,1342.11962890625,1349.5771484375,1350.6845703125,1377.569580078125,1379.4453125,1381.729248046875,1405.443359375,1406.44970703125,1407.2138671875,1423.671142578125,1424.708984375,1455.453369140625,1464.211181640625,1473.658447265625,1476.03076171875,1488.60498046875,1490.8076171875,1491.693359375,1505.753662109375,1524.13232421875,1573.6689453125,1592.799560546875,1593.594482421875,1604.56396484375,1605.345458984375,1606.278076171875,1606.979248046875,1609.817138671875,1610.905517578125,1644.198974609375};
    private double[] intensityArray = {3611.0,1156.0,9668.0,2645.0,2961.0,12209.0,875.0,986.0,767.0,2061.0,20026.0,2198.0,1074.0,3253.0,1370.0,1463.0,3317.0,1318.0,3779.0,1382.0,1342.0,936.0,3586.0,4944.0,6084.0,3037.0,727.0,6786.0,3240.0,1630.0,942.0,9697.0,1273.0,2490.0,1947.0,2909.0,434.0,16993.0,712.0,9431.0,639.0,3693.0,8663.0,6894.0,749.0,4510.0,3342.0,531.0,2087.0,5130.0,22315.0,2056.0,11536.0,2427.0,704.0,2194.0,1333.0,10399.0,8779.0,8811.0,553.0,2309.0,998.0,1411.0,1042.0,2060.0,3358.0,3384.0,1679.0,1618.0,4762.0,2262.0,7766.0,3459.0,6006.0,734.0,1611.0,3043.0,667.0,3381.0,1107.0,3633.0,2433.0,17853.0,4053.0,664.0,338.0,1928.0,1433.0,1236.0,4079.0,3612.0,2888.0,1634.0,2068.0,2203.0,6761.0,1682.0,972.0,752.0,7147.0,16602.0,9579.0,4247.0,10715.0,1139.0,4267.0,2610.0,1468.0,1273.0,4544.0,1758.0,2251.0,368.0,1751.0,13980.0,1.0,7749.0,4605.0,2191.0,2154.0,2246.0,4553.0,3200.0,931.0,2500.0,1540.0,366.0,3012.0,4868.0,1718.0,2646.0,6779.0,565.0,21549.0,18580.0,3410.0,2220.0,4896.0,5441.0,2125.0,2644.0,10501.0,2831.0,1029.0,42432.0,11147.0,10253.0,1976.0,2841.0,491.0,910.0,10643.0,6930.0,1091.0,9795.0,7461.0,1672.0,7712.0,16224.0,415.0,1003.0,1628.0,955.0,11707.0,2673.0,2534.0,13649.0,12289.0,6483.0,1008.0,1713.0,681.0,809.0,500.0,660.0,1796.0,2358.0,1593.0,5477.0,3291.0,6626.0,1665.0,1194.0,1340.0,2123.0,12565.0,5261.0,848.0,1346.0,2252.0,3696.0,4031.0,4237.0,398.0,10375.0,7542.0,1077.0,7972.0,0.0};
    private PeakSet peakSet = PeakSet.getInstance(mzArray, intensityArray);

    @Test
    public void testPeptideScore() {
        PeptideScore peptideScore = new PeptideScore(precursorIon, peakSet);
        int length = precursorIon.getPeptide().getLength();

        ProductIonSet byProductIonSet = peptideScore.getProductIonSet();
        int byCount = byProductIonSet.size();
        assertTrue(byProductIonSet.size() % (length - 1) == 0);

        peptideScore.setIonPair(ProductIonPair.A_X);
        ProductIonSet axProductIonSet = peptideScore.getProductIonSet();
        int axCount = axProductIonSet.size();
        assertTrue(axProductIonSet.size() % (length - 1) == 0);

        assertEquals(byCount, axCount);

        peptideScore.setShowAmmoniaLoss(true);
        peptideScore.setShowWaterLoss(false);
        assertEquals(axCount * 2, peptideScore.getProductIonSet().size());

        peptideScore.setShowAmmoniaLoss(false);
        peptideScore.setShowWaterLoss(true);
        assertEquals(axCount * 2, peptideScore.getProductIonSet().size());

        peptideScore.setShowAmmoniaLoss(true);
        peptideScore.setShowWaterLoss(true);
        assertEquals(axCount * 3, peptideScore.getProductIonSet().size());

        axProductIonSet = peptideScore.getProductIonSet();
        List<ProductIonSet> windows = axProductIonSet.splitWindow(100);
        int sum = 0;
        for (ProductIonSet window : windows) {
            sum += window.size();
        }
        assertTrue(sum == axProductIonSet.size());
    }

    @Test
    public void testCumulativeProbability() {
        double faction = 0.00001;

        BinomialDistribution distribution = new BinomialDistribution(3, 0.5);

        BigDecimal b0 = new BigDecimal(distribution.probability(0));
        BigDecimal b1 = new BigDecimal(distribution.probability(1));
        BigDecimal b2 = new BigDecimal(distribution.probability(2));
        BigDecimal b3 = new BigDecimal(distribution.probability(3));

        BigDecimal c2 = new BigDecimal(distribution.cumulativeProbability(2));
        assertTrue(c2.subtract(b0.add(b1).add(b2)).doubleValue() <= faction);

        BigDecimal ic2 = new BigDecimal(distribution.cumulativeProbability(1, 3));
        assertTrue(ic2.subtract(b2.add(b3)).doubleValue() <= faction);
    }

    @Test
    public void testMatchedSet() throws Exception {
        PeptideScore peptideScore = new PeptideScore(precursorIon, peakSet);
        ProductIonSet productIonSet = peptideScore.getProductIonSet();

        double score;
        for (int i = 1; i <= 10; i++) {
            score = peptideScore.getScore(productIonSet, i, 100);
            assertTrue(score > 0);
        }
    }
}
